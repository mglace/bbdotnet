// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using bbdotnet.Persistence;

#nullable disable

namespace bbdotnet.Persistence.Migrations
{
    [DbContext(typeof(BBDotnetDbContext))]
    [Migration("20230307034104_initial-commit")]
    partial class initialcommit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("bbdotnet.Domain.Flag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateClosed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FlaggedBy")
                        .HasColumnType("int");

                    b.Property<int>("ReasonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Flags");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Flag");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("bbdotnet.Domain.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRemoved")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("RemovedBy")
                        .HasColumnType("int");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Post", (string)null);
                });

            modelBuilder.Entity("bbdotnet.Domain.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Tag", (string)null);
                });

            modelBuilder.Entity("bbdotnet.Domain.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfLastPost")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRemoved")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("PostCount")
                        .HasColumnType("int");

                    b.Property<int?>("RemovedBy")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Topic", (string)null);
                });

            modelBuilder.Entity("bbdotnet.Domain.PostFlag", b =>
                {
                    b.HasBaseType("bbdotnet.Domain.Flag");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("PostId");

                    b.HasDiscriminator().HasValue("PostFlag");
                });

            modelBuilder.Entity("bbdotnet.Domain.TopicFlag", b =>
                {
                    b.HasBaseType("bbdotnet.Domain.Flag");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("TopicId");

                    b.HasDiscriminator().HasValue("TopicFlag");
                });

            modelBuilder.Entity("bbdotnet.Domain.Topic", b =>
                {
                    b.OwnsMany("bbdotnet.Domain.TagId", "TagIds", b1 =>
                        {
                            b1.Property<Guid>("TopicId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("TagId");

                            b1.HasKey("TopicId", "Value");

                            b1.HasIndex("Value");

                            b1.ToTable("TopicTagId", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("TopicId");

                            b1.HasOne("bbdotnet.Domain.Tag", null)
                                .WithMany()
                                .HasForeignKey("Value")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();
                        });

                    b.Navigation("TagIds");
                });

            modelBuilder.Entity("bbdotnet.Domain.PostFlag", b =>
                {
                    b.HasOne("bbdotnet.Domain.Post", "Post")
                        .WithMany("Flags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("bbdotnet.Domain.TopicFlag", b =>
                {
                    b.HasOne("bbdotnet.Domain.Topic", "Topic")
                        .WithMany("Flags")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("bbdotnet.Domain.Post", b =>
                {
                    b.Navigation("Flags");
                });

            modelBuilder.Entity("bbdotnet.Domain.Topic", b =>
                {
                    b.Navigation("Flags");
                });
#pragma warning restore 612, 618
        }
    }
}
